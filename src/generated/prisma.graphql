# source: https://eu1.prisma.sh/petr-canek-398ab8/book-orm/dev
# timestamp: Thu Sep 20 2018 20:47:15 GMT+0200 (CEST)

type AggregateAuthor {
  count: Int!
}

type AggregateBook {
  count: Int!
}

type Author implements Node {
  id: ID!
  name: String
  biography: String
  books(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Book!]
}

"""A connection to a list of items."""
type AuthorConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AuthorEdge]!
  aggregate: AggregateAuthor!
}

input AuthorCreateInput {
  name: String
  biography: String
  books: BookCreateManyWithoutAuthorInput
}

input AuthorCreateOneWithoutBooksInput {
  create: AuthorCreateWithoutBooksInput
  connect: AuthorWhereUniqueInput
}

input AuthorCreateWithoutBooksInput {
  name: String
  biography: String
}

"""An edge in a connection."""
type AuthorEdge {
  """The item at the end of the edge."""
  node: Author!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AuthorOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  biography_ASC
  biography_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AuthorPreviousValues {
  id: ID!
  name: String
  biography: String
}

type AuthorSubscriptionPayload {
  mutation: MutationType!
  node: Author
  updatedFields: [String!]
  previousValues: AuthorPreviousValues
}

input AuthorSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AuthorSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AuthorSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AuthorSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AuthorWhereInput
}

input AuthorUpdateInput {
  name: String
  biography: String
  books: BookUpdateManyWithoutAuthorInput
}

input AuthorUpdateOneRequiredWithoutBooksInput {
  create: AuthorCreateWithoutBooksInput
  connect: AuthorWhereUniqueInput
  update: AuthorUpdateWithoutBooksDataInput
  upsert: AuthorUpsertWithoutBooksInput
}

input AuthorUpdateWithoutBooksDataInput {
  name: String
  biography: String
}

input AuthorUpsertWithoutBooksInput {
  update: AuthorUpdateWithoutBooksDataInput!
  create: AuthorCreateWithoutBooksInput!
}

input AuthorWhereInput {
  """Logical AND on all given filters."""
  AND: [AuthorWhereInput!]

  """Logical OR on all given filters."""
  OR: [AuthorWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AuthorWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  biography: String

  """All values that are not equal to given value."""
  biography_not: String

  """All values that are contained in given list."""
  biography_in: [String!]

  """All values that are not contained in given list."""
  biography_not_in: [String!]

  """All values less than the given value."""
  biography_lt: String

  """All values less than or equal the given value."""
  biography_lte: String

  """All values greater than the given value."""
  biography_gt: String

  """All values greater than or equal the given value."""
  biography_gte: String

  """All values containing the given string."""
  biography_contains: String

  """All values not containing the given string."""
  biography_not_contains: String

  """All values starting with the given string."""
  biography_starts_with: String

  """All values not starting with the given string."""
  biography_not_starts_with: String

  """All values ending with the given string."""
  biography_ends_with: String

  """All values not ending with the given string."""
  biography_not_ends_with: String
  books_every: BookWhereInput
  books_some: BookWhereInput
  books_none: BookWhereInput
}

input AuthorWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Book implements Node {
  id: ID!
  name: String
  description: String
  author(where: AuthorWhereInput): Author!
}

"""A connection to a list of items."""
type BookConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BookEdge]!
  aggregate: AggregateBook!
}

input BookCreateInput {
  name: String
  description: String
  author: AuthorCreateOneWithoutBooksInput!
}

input BookCreateManyWithoutAuthorInput {
  create: [BookCreateWithoutAuthorInput!]
  connect: [BookWhereUniqueInput!]
}

input BookCreateWithoutAuthorInput {
  name: String
  description: String
}

"""An edge in a connection."""
type BookEdge {
  """The item at the end of the edge."""
  node: Book!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BookOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type BookPreviousValues {
  id: ID!
  name: String
  description: String
}

type BookSubscriptionPayload {
  mutation: MutationType!
  node: Book
  updatedFields: [String!]
  previousValues: BookPreviousValues
}

input BookSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BookSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BookWhereInput
}

input BookUpdateInput {
  name: String
  description: String
  author: AuthorUpdateOneRequiredWithoutBooksInput
}

input BookUpdateManyWithoutAuthorInput {
  create: [BookCreateWithoutAuthorInput!]
  connect: [BookWhereUniqueInput!]
  disconnect: [BookWhereUniqueInput!]
  delete: [BookWhereUniqueInput!]
  update: [BookUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [BookUpsertWithWhereUniqueWithoutAuthorInput!]
}

input BookUpdateWithoutAuthorDataInput {
  name: String
  description: String
}

input BookUpdateWithWhereUniqueWithoutAuthorInput {
  where: BookWhereUniqueInput!
  data: BookUpdateWithoutAuthorDataInput!
}

input BookUpsertWithWhereUniqueWithoutAuthorInput {
  where: BookWhereUniqueInput!
  update: BookUpdateWithoutAuthorDataInput!
  create: BookCreateWithoutAuthorInput!
}

input BookWhereInput {
  """Logical AND on all given filters."""
  AND: [BookWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  author: AuthorWhereInput
}

input BookWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createAuthor(data: AuthorCreateInput!): Author!
  createBook(data: BookCreateInput!): Book!
  updateAuthor(data: AuthorUpdateInput!, where: AuthorWhereUniqueInput!): Author
  updateBook(data: BookUpdateInput!, where: BookWhereUniqueInput!): Book
  deleteAuthor(where: AuthorWhereUniqueInput!): Author
  deleteBook(where: BookWhereUniqueInput!): Book
  upsertAuthor(where: AuthorWhereUniqueInput!, create: AuthorCreateInput!, update: AuthorUpdateInput!): Author!
  upsertBook(where: BookWhereUniqueInput!, create: BookCreateInput!, update: BookUpdateInput!): Book!
  updateManyAuthors(data: AuthorUpdateInput!, where: AuthorWhereInput): BatchPayload!
  updateManyBooks(data: BookUpdateInput!, where: BookWhereInput): BatchPayload!
  deleteManyAuthors(where: AuthorWhereInput): BatchPayload!
  deleteManyBooks(where: BookWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  authors(where: AuthorWhereInput, orderBy: AuthorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Author]!
  books(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Book]!
  author(where: AuthorWhereUniqueInput!): Author
  book(where: BookWhereUniqueInput!): Book
  authorsConnection(where: AuthorWhereInput, orderBy: AuthorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AuthorConnection!
  booksConnection(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BookConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  author(where: AuthorSubscriptionWhereInput): AuthorSubscriptionPayload
  book(where: BookSubscriptionWhereInput): BookSubscriptionPayload
}
